import axios from 'axios';
import { store } from '../store/store';
import { logout } from '../store/slices/authSlice';
import { getToken } from '../utils/localStorage';

// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
const isDevelopment = import.meta.env.MODE === 'development';
const API_BASE_URL = isDevelopment ? 'http://localhost:5000' : import.meta.env.VITE_API_URL;

console.log('[axios] Environment:', import.meta.env.MODE);
console.log('[axios] baseURL =', API_BASE_URL);

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
  withCredentials: false, // –û—Ç–∫–ª—é—á–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–æ–∫–µ–Ω–∞
axiosInstance.interceptors.request.use(
  (config) => {
    const token = getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    console.log('üöÄ Request:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      headers: {
        ...config.headers,
        Authorization: config.headers?.Authorization ? '[HIDDEN]' : undefined,
      },
      data: config.data,
    });
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error.message);
    return Promise.reject(error);
  }
);

axiosInstance.interceptors.response.use(
  (response) => {
    console.log('‚úÖ Response:', {
      status: response.status,
      statusText: response.statusText,
      data: response.data,
      headers: response.headers,
    });
    return response;
  },
  (error) => {
    if (error.response) {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 401 –∏–ª–∏ 403, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (error.response.status === 401 || error.response.status === 403) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π URL —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const currentPath = window.location.pathname;
        if (currentPath !== '/login' && currentPath !== '/register') {
        store.dispatch(logout());
        window.location.href = '/login';
        }
      }
      console.error('‚ùå Response Error:', {
        status: error.response.status,
        data: error.response.data,
      });
    } else if (error.request) {
      console.error('‚ùå Network Error:', error.message);
    } else {
      console.error('‚ùå Request Setup Error:', error.message);
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;
 